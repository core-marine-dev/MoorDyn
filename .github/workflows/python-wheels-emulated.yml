name: Python-manylinux-arch

on:
  workflow_call:
    inputs:
      os:
        description: 'Host OS'
        required: false
        type: string
        default: '["ubuntu-22.04"]'
      arch:
        description: 'Architecture target'
        required: true
        type: string
        
permissions: write-all

jobs:
  build_wheels:
    name: Build Python wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ${{ fromJSON(inputs.os) }}
    env:
      # Skip 32-bit windows wheels builds.
      CIBW_SKIP: "*-win32*"
      CIBW_ARCHS: ${{inputs.arch}}
      CIBW_BEFORE_ALL: >
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install -DEXTERNAL_EIGEN:BOOL=OFF -DPYTHON_WRAPPER:BOOL=OFF -DFORTRAN_WRAPPER:BOOL=OFF -DRUST_WRAPPER:BOOL=OFF -DUSE_VTK=ON -DVTK_DIR=${{github.workspace}}/vtk/lib/cmake/vtk-9.2/ -DMOORDYN_PACKAGE_IGNORE_VTK_DEPENDENCY=ON -DBUILD_TESTING=OFF &&
        cmake --build ${{github.workspace}}/build --config Release &&
        cmake --install ${{github.workspace}}/build --config Release
      
    steps:
      - uses: actions/checkout@v4

      # Used to host cibuildwheel
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x' 

      - name: Create setup.py
        run: |
            mv wrappers/python/wheels.github/* ./
            python set_version.py
            python set_eigen_data.py
            rm set_version.py set_eigen_data.py            
            cat pyproject.toml
        shell: bash

      - name:
        run: |
            if [ "${{inputs.os}}" == '["ubuntu-22.04"]' ]; then
                echo "VTK_NAME=vtk-manylinux2014_${{inputs.arch}}.tar.gz" >> $GITHUB_ENV
            elif [ "${{inputs.os}}" == '["macOS-latest"]' ]; then
                echo "VTK_NAME=vtk-macOS-x86_64.tar.gz" >> $GITHUB_ENV
            elif [ "${{inputs.os}}" == '["windows-latest"]' ]; then
                echo "VTK_NAME=vtk-Windows-x86_64.tar.gz" >> $GITHUB_ENV
            else
                exit 255
            fi
  
      - name: download pre-built VTK static library
        uses: suisei-cn/actions-download-file@v1.6.0
        with:
          url: https://github.com/sanguinariojoe/vtk-builds/releases/download/VTK-9.2.6-static/$VTK_NAME
          target: ${{github.workspace}}/

      - name: Create folders
        run: |
            mkdir -p ${{github.workspace}}/vtk
            mkdir -p ${{github.workspace}}/build
            mkdir -p ${{github.workspace}}/install

      - name: Extract VTK tgz
        run: |
            tar -xvzf $VTK_NAME -C vtk/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.20.0
        with:
            output-dir: dist
        env:
          # configure cibuildwheel to build native archs ('auto'), and some
          # emulated ones
          CIBW_ARCHS_LINUX: ${{inputs.arch}}
          # Skip 32-bit wheels builds as well as musllinux
          CIBW_SKIP: "*-win32 *musllinux*"
          CIBW_BEFORE_ALL_LINUX: >
            echo "Considering vtk-manylinux2014_`uname -m`.tar.gz..." &&
            mkdir -p vtk &&
            tar -xvzf vtk-manylinux2014_`uname -m`.tar.gz -C vtk/

      - uses: actions/upload-artifact@v4
        id: build_wheels
        with:
          name: python-wheels-${{inputs.arch}}
          path: ./dist/*
